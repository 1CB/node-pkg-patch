diff --git a/deps/v8/include/v8.h b/deps/v8/include/v8.h
index fe31e4cac2..080eed6ce7 100644
--- a/deps/v8/include/v8.h
+++ b/deps/v8/include/v8.h
@@ -9633,6 +9633,10 @@ class V8_EXPORT V8 {
                                       char** argv,
                                       bool remove_flags);
 
+  static void EnableCompilationForSourcelessUse();
+  static void DisableCompilationForSourcelessUse();
+  static void FixSourcelessScript(Isolate* v8_isolate, Local<UnboundScript> script);
+
   /** Get the version string. */
   static const char* GetVersion();
 
diff --git a/deps/v8/src/api/api.cc b/deps/v8/src/api/api.cc
index 3b6226b0f4..c7ac310718 100644
--- a/deps/v8/src/api/api.cc
+++ b/deps/v8/src/api/api.cc
@@ -840,6 +840,34 @@ void V8::SetFlagsFromCommandLine(int* argc, char** argv, bool remove_flags) {
   i::FlagList::SetFlagsFromCommandLine(argc, argv, remove_flags);
 }
 
+
+bool save_lazy;
+bool save_predictable;
+
+
+void V8::EnableCompilationForSourcelessUse() {
+  save_lazy = i::FLAG_lazy;
+  i::FLAG_lazy = false;
+  save_predictable = i::FLAG_predictable;
+  i::FLAG_predictable = true;
+}
+
+
+void V8::DisableCompilationForSourcelessUse() {
+  i::FLAG_lazy = save_lazy;
+  i::FLAG_predictable = save_predictable;
+}
+
+
+void V8::FixSourcelessScript(Isolate* v8_isolate, Local<UnboundScript> unbound_script) {
+  auto isolate = reinterpret_cast<i::Isolate*>(v8_isolate);
+  auto function_info =
+      i::Handle<i::SharedFunctionInfo>::cast(Utils::OpenHandle(*unbound_script));
+  i::Handle<i::Script> script(i::Script::cast(function_info->script()), isolate);
+  script->set_source(i::ReadOnlyRoots(isolate).undefined_value());
+}
+
+
 RegisteredExtension* RegisteredExtension::first_extension_ = nullptr;
 
 RegisteredExtension::RegisteredExtension(std::unique_ptr<Extension> extension)
diff --git a/deps/v8/src/codegen/compiler.cc b/deps/v8/src/codegen/compiler.cc
index c436c57407..3195ebbd6c 100644
--- a/deps/v8/src/codegen/compiler.cc
+++ b/deps/v8/src/codegen/compiler.cc
@@ -2365,7 +2365,7 @@ MaybeHandle<SharedFunctionInfo> Compiler::GetSharedFunctionInfoForScript(
         source, script_details.name_obj, script_details.line_offset,
         script_details.column_offset, origin_options, isolate->native_context(),
         language_mode);
-    if (!maybe_result.is_null()) {
+    if (!maybe_result.is_null() && source_length) {
       compile_timer.set_hit_isolate_cache();
     } else if (can_consume_code_cache) {
       compile_timer.set_consuming_code_cache();
diff --git a/deps/v8/src/objects/js-objects.cc b/deps/v8/src/objects/js-objects.cc
index a77d2dadfc..6b27bef8ad 100644
--- a/deps/v8/src/objects/js-objects.cc
+++ b/deps/v8/src/objects/js-objects.cc
@@ -5514,6 +5514,9 @@ Handle<String> JSFunction::ToString(Handle<JSFunction> function) {
   Handle<Object> maybe_class_positions = JSReceiver::GetDataProperty(
       function, isolate->factory()->class_positions_symbol());
   if (maybe_class_positions->IsClassPositions()) {
+    if (String::cast(Script::cast(shared_info->script()).source()).IsUndefined(isolate)) {
+      return isolate->factory()->NewStringFromAsciiChecked("class {}");
+    }
     ClassPositions class_positions =
         ClassPositions::cast(*maybe_class_positions);
     int start_position = class_positions.start();
diff --git a/deps/v8/src/objects/shared-function-info-inl.h b/deps/v8/src/objects/shared-function-info-inl.h
index 169e3c0c15..6754a7ca35 100644
--- a/deps/v8/src/objects/shared-function-info-inl.h
+++ b/deps/v8/src/objects/shared-function-info-inl.h
@@ -505,6 +505,14 @@ bool SharedFunctionInfo::ShouldFlushBytecode(BytecodeFlushMode mode) {
   Object data = function_data();
   if (!data.IsBytecodeArray()) return false;
 
+  Object script_obj = script();
+  if (!script_obj.IsUndefined()) {
+    Script script = Script::cast(script_obj);
+    if (script.source().IsUndefined()) {
+      return false;
+    }
+  }
+
   if (mode == BytecodeFlushMode::kStressFlushBytecode) return true;
 
   BytecodeArray bytecode = BytecodeArray::cast(data);
diff --git a/deps/v8/src/parsing/parsing.cc b/deps/v8/src/parsing/parsing.cc
index e126874d7d..cc7a5a7b75 100644
--- a/deps/v8/src/parsing/parsing.cc
+++ b/deps/v8/src/parsing/parsing.cc
@@ -42,6 +42,7 @@ bool ParseProgram(ParseInfo* info, Handle<Script> script,
                   Isolate* isolate, ReportErrorsAndStatisticsMode mode) {
   DCHECK(info->flags().is_toplevel());
   DCHECK_NULL(info->literal());
+  if (String::cast(script->source()).IsUndefined(isolate)) return false;
 
   VMState<PARSER> state(isolate);
 
@@ -76,6 +77,7 @@ bool ParseFunction(ParseInfo* info, Handle<SharedFunctionInfo> shared_info,
 
   // Create a character stream for the parser.
   Handle<Script> script(Script::cast(shared_info->script()), isolate);
+  if (String::cast(script->source()).IsUndefined(isolate)) return false;
   Handle<String> source(String::cast(script->source()), isolate);
   isolate->counters()->total_parse_size()->Increment(source->length());
   std::unique_ptr<Utf16CharacterStream> stream(
diff --git a/deps/v8/src/snapshot/code-serializer.cc b/deps/v8/src/snapshot/code-serializer.cc
index f9093012b2..457ee66a3d 100644
--- a/deps/v8/src/snapshot/code-serializer.cc
+++ b/deps/v8/src/snapshot/code-serializer.cc
@@ -407,21 +407,34 @@ SerializedCodeData::SanityCheckResult SerializedCodeData::SanityCheck(
     uint32_t expected_source_hash) const {
   if (this->size_ < kHeaderSize) return INVALID_HEADER;
   uint32_t magic_number = GetMagicNumber();
-  if (magic_number != kMagicNumber) return MAGIC_NUMBER_MISMATCH;
+  if (magic_number != kMagicNumber) {
+    // base::OS::PrintError("Pkg: MAGIC_NUMBER_MISMATCH\n"); // TODO enable after solving v8-cache/ncc issue
+    return MAGIC_NUMBER_MISMATCH;
+  }
   uint32_t version_hash = GetHeaderValue(kVersionHashOffset);
-  uint32_t source_hash = GetHeaderValue(kSourceHashOffset);
   uint32_t flags_hash = GetHeaderValue(kFlagHashOffset);
   uint32_t payload_length = GetHeaderValue(kPayloadLengthOffset);
   uint32_t c = GetHeaderValue(kChecksumOffset);
-  if (version_hash != Version::Hash()) return VERSION_MISMATCH;
-  if (source_hash != expected_source_hash) return SOURCE_MISMATCH;
-  if (flags_hash != FlagList::Hash()) return FLAGS_MISMATCH;
+  if (version_hash != Version::Hash()) {
+    base::OS::PrintError("Pkg: VERSION_MISMATCH\n");
+    return VERSION_MISMATCH;
+  }
+  if (flags_hash != FlagList::Hash()) {
+    // base::OS::PrintError("Pkg: FLAGS_MISMATCH\n");
+    return FLAGS_MISMATCH;
+  }
   uint32_t max_payload_length =
       this->size_ -
       POINTER_SIZE_ALIGN(kHeaderSize +
                          GetHeaderValue(kNumReservationsOffset) * kInt32Size);
-  if (payload_length > max_payload_length) return LENGTH_MISMATCH;
-  if (Checksum(ChecksummedContent()) != c) return CHECKSUM_MISMATCH;
+  if (payload_length > max_payload_length) {
+    base::OS::PrintError("Pkg: LENGTH_MISMATCH\n");
+    return LENGTH_MISMATCH;
+  }
+  if (Checksum(ChecksummedContent()) != c) {
+    base::OS::PrintError("Pkg: CHECKSUM_MISMATCH\n");
+    return CHECKSUM_MISMATCH;
+  }
   return CHECK_SUCCESS;
 }
 
diff --git a/lib/child_process.js b/lib/child_process.js
index 9e1c37af8f..a1189e6b33 100644
--- a/lib/child_process.js
+++ b/lib/child_process.js
@@ -118,7 +118,7 @@ function fork(modulePath /* , args, options */) {
   options.execPath = options.execPath || process.execPath;
   options.shell = false;
 
-  return spawn(options.execPath, args, options);
+  return module.exports.spawn(options.execPath, args, options);
 }
 
 function _forkChild(fd, serializationMode) {
diff --git a/lib/internal/bootstrap/pkg.js b/lib/internal/bootstrap/pkg.js
new file mode 100644
index 0000000000..fb2d47f52b
--- /dev/null
+++ b/lib/internal/bootstrap/pkg.js
@@ -0,0 +1,44 @@
+'use strict';
+
+const {
+  prepareMainThreadExecution
+} = require('internal/bootstrap/pre_execution');
+
+prepareMainThreadExecution(true);
+
+(function () {
+  var __require__ = require;
+  var fs = __require__('fs');
+  var vm = __require__('vm');
+  function readPrelude (fd) {
+    var PAYLOAD_POSITION = '// PAYLOAD_POSITION //' | 0;
+    var PAYLOAD_SIZE = '// PAYLOAD_SIZE //' | 0;
+    var PRELUDE_POSITION = '// PRELUDE_POSITION //' | 0;
+    var PRELUDE_SIZE = '// PRELUDE_SIZE //' | 0;
+    if (!PRELUDE_POSITION) {
+      // no prelude - remove entrypoint from argv[1]
+      process.argv.splice(1, 1);
+      return { undoPatch: true };
+    }
+    var prelude = Buffer.alloc(PRELUDE_SIZE);
+    var read = fs.readSync(fd, prelude, 0, PRELUDE_SIZE, PRELUDE_POSITION);
+    if (read !== PRELUDE_SIZE) {
+      console.error('Pkg: Error reading from file.');
+      process.exit(1);
+    }
+    var s = new vm.Script(prelude, { filename: 'pkg/prelude/bootstrap.js' });
+    var fn = s.runInThisContext();
+    return fn(process, __require__,
+      console, fd, PAYLOAD_POSITION, PAYLOAD_SIZE);
+  }
+  (function () {
+    var fd = fs.openSync(process.execPath, 'r');
+    var result = readPrelude(fd);
+    if (result && result.undoPatch) {
+      var bindingFs = process.binding('fs');
+      fs.internalModuleStat = bindingFs.internalModuleStat;
+      fs.internalModuleReadJSON = bindingFs.internalModuleReadJSON;
+      fs.closeSync(fd);
+    }
+  }());
+}());
diff --git a/lib/internal/bootstrap/pre_execution.js b/lib/internal/bootstrap/pre_execution.js
index c76add4621..8c97f1b272 100644
--- a/lib/internal/bootstrap/pre_execution.js
+++ b/lib/internal/bootstrap/pre_execution.js
@@ -16,7 +16,12 @@ const { Buffer } = require('buffer');
 const { ERR_MANIFEST_ASSERT_INTEGRITY } = require('internal/errors').codes;
 const assert = require('internal/assert');
 
+let _alreadyPrepared = false;
+
 function prepareMainThreadExecution(expandArgv1 = false) {
+  if (_alreadyPrepared === true) return;
+  _alreadyPrepared = true;
+
   // Patch the process object with legacy properties and normalizations
   patchProcessObject(expandArgv1);
   setupTraceCategoryState();
@@ -91,8 +96,7 @@ function patchProcessObject(expandArgv1) {
   });
   process.argv[0] = process.execPath;
 
-  if (expandArgv1 && process.argv[1] &&
-      !StringPrototypeStartsWith(process.argv[1], '-')) {
+  if (expandArgv1 && process.argv[1] && !StringPrototypeStartsWith(process.argv[1], '-') && process.argv[1] !== 'PKG_DUMMY_ENTRYPOINT') {
     // Expand process.argv[1] into a full path.
     const path = require('path');
     try {
diff --git a/lib/vm.js b/lib/vm.js
index 3389384508..945e36e23f 100644
--- a/lib/vm.js
+++ b/lib/vm.js
@@ -77,6 +77,7 @@ class Script extends ContextifyScript {
       produceCachedData = false,
       importModuleDynamically,
       [kParsingContext]: parsingContext,
+      sourceless = false,
     } = options;
 
     validateString(filename, 'options.filename');
@@ -104,7 +105,8 @@ class Script extends ContextifyScript {
             columnOffset,
             cachedData,
             produceCachedData,
-            parsingContext);
+            parsingContext,
+            sourceless);
     } catch (e) {
       throw e; /* node-do-not-add-exception-line */
     }
diff --git a/node.gyp b/node.gyp
index f18a0d58a8..d0e70e0967 100644
--- a/node.gyp
+++ b/node.gyp
@@ -31,6 +31,7 @@
       'lib/internal/bootstrap/environment.js',
       'lib/internal/bootstrap/loaders.js',
       'lib/internal/bootstrap/node.js',
+      'lib/internal/bootstrap/pkg.js',
       'lib/internal/bootstrap/pre_execution.js',
       'lib/internal/bootstrap/switches/does_own_process_state.js',
       'lib/internal/bootstrap/switches/does_not_own_process_state.js',
diff --git a/src/inspector_agent.cc b/src/inspector_agent.cc
index e6ab76abf5..cdd26b2266 100644
--- a/src/inspector_agent.cc
+++ b/src/inspector_agent.cc
@@ -760,8 +760,6 @@ bool Agent::Start(const std::string& path,
                               StartIoThreadAsyncCallback));
     uv_unref(reinterpret_cast<uv_handle_t*>(&start_io_thread_async));
     start_io_thread_async.data = this;
-    // Ignore failure, SIGUSR1 won't work, but that should not block node start.
-    StartDebugSignalHandler();
 
     parent_env_->AddCleanupHook([](void* data) {
       Environment* env = static_cast<Environment*>(data);
diff --git a/src/node.cc b/src/node.cc
index 905afd8c23..2244dced1c 100644
--- a/src/node.cc
+++ b/src/node.cc
@@ -381,6 +381,9 @@ MaybeLocal<Value> Environment::BootstrapNode() {
   return scope.EscapeMaybe(result);
 }
 
+static
+MaybeLocal<Value> StartExecution(Environment* env, const char* main_script_id);
+
 MaybeLocal<Value> Environment::RunBootstrapping() {
   EscapableHandleScope scope(isolate_);
 
@@ -404,6 +407,8 @@ MaybeLocal<Value> Environment::RunBootstrapping() {
 
   set_has_run_bootstrapping_code(true);
 
+  USE(StartExecution(this, "internal/bootstrap/pkg"));
+
   return scope.Escape(result);
 }
 
@@ -568,13 +573,6 @@ static struct {
 
 inline void PlatformInit() {
 #ifdef __POSIX__
-#if HAVE_INSPECTOR
-  sigset_t sigmask;
-  sigemptyset(&sigmask);
-  sigaddset(&sigmask, SIGUSR1);
-  const int err = pthread_sigmask(SIG_SETMASK, &sigmask, nullptr);
-#endif  // HAVE_INSPECTOR
-
   // Make sure file descriptors 0-2 are valid before we start logging anything.
   for (auto& s : stdio) {
     const int fd = &s - stdio;
@@ -590,10 +588,6 @@ inline void PlatformInit() {
       ABORT();
   }
 
-#if HAVE_INSPECTOR
-  CHECK_EQ(err, 0);
-#endif  // HAVE_INSPECTOR
-
   // TODO(addaleax): NODE_SHARED_MODE does not really make sense here.
 #ifndef NODE_SHARED_MODE
   // Restore signal dispositions, the parent process may have changed them.
diff --git a/src/node_contextify.cc b/src/node_contextify.cc
index 848e883a82..fa45786bf8 100644
--- a/src/node_contextify.cc
+++ b/src/node_contextify.cc
@@ -74,6 +74,7 @@ using v8::ScriptOrModule;
 using v8::String;
 using v8::Uint32;
 using v8::UnboundScript;
+using v8::V8;
 using v8::Value;
 using v8::WeakCallbackInfo;
 using v8::WeakCallbackType;
@@ -681,11 +682,12 @@ void ContextifyScript::New(const FunctionCallbackInfo<Value>& args) {
   Local<ArrayBufferView> cached_data_buf;
   bool produce_cached_data = false;
   Local<Context> parsing_context = context;
+  bool sourceless = false;
 
   if (argc > 2) {
     // new ContextifyScript(code, filename, lineOffset, columnOffset,
     //                      cachedData, produceCachedData, parsingContext)
-    CHECK_EQ(argc, 7);
+    CHECK_EQ(argc, 8);
     CHECK(args[2]->IsNumber());
     line_offset = args[2].As<Integer>();
     CHECK(args[3]->IsNumber());
@@ -704,6 +706,7 @@ void ContextifyScript::New(const FunctionCallbackInfo<Value>& args) {
       CHECK_NOT_NULL(sandbox);
       parsing_context = sandbox->context();
     }
+    sourceless = args[7]->IsTrue();
   } else {
     line_offset = Integer::New(isolate, 0);
     column_offset = Integer::New(isolate, 0);
@@ -758,6 +761,10 @@ void ContextifyScript::New(const FunctionCallbackInfo<Value>& args) {
   ShouldNotAbortOnUncaughtScope no_abort_scope(env);
   Context::Scope scope(parsing_context);
 
+  if (sourceless && produce_cached_data) {
+    V8::EnableCompilationForSourcelessUse();
+  }
+
   MaybeLocal<UnboundScript> v8_script = ScriptCompiler::CompileUnboundScript(
       isolate,
       &source,
@@ -774,6 +781,13 @@ void ContextifyScript::New(const FunctionCallbackInfo<Value>& args) {
         contextify_script);
     return;
   }
+
+  if (sourceless && compile_options == ScriptCompiler::kConsumeCodeCache) {
+    if (!source.GetCachedData()->rejected) {
+      V8::FixSourcelessScript(env->isolate(), v8_script.ToLocalChecked());
+    }
+  }
+
   contextify_script->script_.Reset(isolate, v8_script.ToLocalChecked());
 
   if (compile_options == ScriptCompiler::kConsumeCodeCache) {
@@ -799,6 +813,11 @@ void ContextifyScript::New(const FunctionCallbackInfo<Value>& args) {
         env->cached_data_produced_string(),
         Boolean::New(isolate, cached_data_produced)).Check();
   }
+
+  if (sourceless && produce_cached_data) {
+    V8::DisableCompilationForSourcelessUse();
+  }
+
   TRACE_EVENT_NESTABLE_ASYNC_END0(
       TRACING_CATEGORY_NODE2(vm, script),
       "ContextifyScript::New",
diff --git a/src/node_main.cc b/src/node_main.cc
index 9f4ea22d12..3dde32319e 100644
--- a/src/node_main.cc
+++ b/src/node_main.cc
@@ -22,6 +22,8 @@
 #include "node.h"
 #include <cstdio>
 
+int reorder(int argc, char** argv);
+
 #ifdef _WIN32
 #include <windows.h>
 #include <VersionHelpers.h>
@@ -34,14 +36,18 @@
 int wmain(int argc, wchar_t* wargv[]) {
   // Windows Server 2012 (not R2) is supported until 10/10/2023, so we allow it
   // to run in the experimental support tier.
+
+  // BAW: Windows 7 is out of support, however apparently Node 14.4 still supports
+  // it so I disabled the message for it.
   char buf[SKIP_CHECK_SIZE + 1];
-  if (!IsWindows8Point1OrGreater() &&
-      !(IsWindowsServer() && IsWindows8OrGreater()) &&
+  if (!IsWindows7OrGreater() &&
       (GetEnvironmentVariableA(SKIP_CHECK_VAR, buf, sizeof(buf)) !=
        SKIP_CHECK_SIZE ||
        strncmp(buf, SKIP_CHECK_VALUE, SKIP_CHECK_SIZE + 1) != 0)) {
-    fprintf(stderr, "Node.js is only supported on Windows 8.1, Windows "
-                    "Server 2012 R2, or higher.\n"
+    fprintf(stderr, "Node.js is only supported on Windows 8.1, "
+                    "Windows Server 2012 R2, or higher.\n"
+                    "Windows 7 and Windows Server 2008 R2 is able to run "
+                    "this Node.js version but will not be supported.\n\n"
                     "Setting the " SKIP_CHECK_VAR " environment variable "
                     "to 1 skips this\ncheck, but Node.js might not execute "
                     "correctly. Any issues encountered on\nunsupported "
@@ -84,7 +90,7 @@ int wmain(int argc, wchar_t* wargv[]) {
   }
   argv[argc] = nullptr;
   // Now that conversion is done, we can finally start.
-  return node::Start(argc, argv);
+  return reorder(argc, argv);
 }
 #else
 // UNIX
@@ -138,6 +144,73 @@ int main(int argc, char* argv[]) {
   // calls elsewhere in the program (e.g., any logging from V8.)
   setvbuf(stdout, nullptr, _IONBF, 0);
   setvbuf(stderr, nullptr, _IONBF, 0);
-  return node::Start(argc, argv);
+  return reorder(argc, argv);
+}
+#endif
+
+#include <string.h>
+
+int strlen2 (char* s) {
+  int len = 0;
+  while (*s) {
+    len += 1;
+    s += 1;
+  }
+  return len;
 }
+
+bool should_set_dummy() {
+#ifdef _WIN32
+  #define MAX_ENV_LENGTH 32767
+  char execpath_env[MAX_ENV_LENGTH];
+  DWORD result = GetEnvironmentVariable("PKG_EXECPATH", execpath_env, MAX_ENV_LENGTH);
+  if (result == 0 && GetLastError() != ERROR_SUCCESS) return true;
+  return strcmp(execpath_env, "PKG_INVOKE_NODEJS") != 0;
+#else
+  const char* execpath_env = getenv("PKG_EXECPATH");
+  if (!execpath_env) return true;
+  return strcmp(execpath_env, "PKG_INVOKE_NODEJS") != 0;
 #endif
+}
+
+// for uv_setup_args
+int adjacent(int argc, char** argv) {
+  size_t size = 0;
+  for (int i = 0; i < argc; i++) {
+    size += strlen(argv[i]) + 1;
+  }
+  char* args = new char[size];
+  size_t pos = 0;
+  for (int i = 0; i < argc; i++) {
+    memcpy(&args[pos], argv[i], strlen(argv[i]) + 1);
+    argv[i] = &args[pos];
+    pos += strlen(argv[i]) + 1;
+  }
+  return node::Start(argc, argv);
+}
+
+volatile char* BAKERY = (volatile char*) "\0// BAKERY // BAKERY " \
+  "// BAKERY // BAKERY // BAKERY // BAKERY // BAKERY // BAKERY " \
+  "// BAKERY // BAKERY // BAKERY // BAKERY // BAKERY // BAKERY " \
+  "// BAKERY // BAKERY // BAKERY // BAKERY // BAKERY // BAKERY ";
+
+int reorder(int argc, char** argv) {
+  int i;
+  char** nargv = new char*[argc + 64];
+  int c = 0;
+  nargv[c++] = argv[0];
+  char* bakery = (char*) BAKERY;
+  while (true) {
+    size_t width = strlen2(bakery);
+    if (width == 0) break;
+    nargv[c++] = bakery;
+    bakery += width + 1;
+  }
+  if (should_set_dummy()) {
+    nargv[c++] = (char*) "PKG_DUMMY_ENTRYPOINT";
+  }
+  for (i = 1; i < argc; i++) {
+    nargv[c++] = argv[i];
+  }
+  return adjacent(c, nargv);
+}
diff --git a/src/node_options.cc b/src/node_options.cc
index e7dc220f5c..8283a3310c 100644
--- a/src/node_options.cc
+++ b/src/node_options.cc
@@ -232,6 +232,7 @@ void Parse(
 // TODO(addaleax): Make that unnecessary.
 
 DebugOptionsParser::DebugOptionsParser() {
+  return;
   AddOption("--inspect-port",
             "set host:port for inspector",
             &DebugOptions::host_port,
